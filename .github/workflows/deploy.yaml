name: Deploy
run-name: "Deploy to: ${{ inputs.environment || 'website1/production' }}"

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
env:
  ENV_NAME: ${{ inputs.environment || 'website1/production' }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'website1/production' }}
    timeout-minutes: 10
    concurrency:
      group: ${{ inputs.environment || 'website1/production' }}
    env:
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.REPO_SECRET_CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.REPO_SECRET_CLOUDFLARE_API_TOKEN }}

    steps:
      - name: Checkout 🔔
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8.14.0
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
      - name: Cache turbo setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Set site name
        id: site_config
        run: |
          SITE_NAME=$(echo ${{env.ENV_NAME}} | awk -F '/' '{print $1}')
          SITE_ENV_NAME=$(echo ${{env.ENV_NAME}} | awk -F '/' '{print $1 "-" $2}')
          echo "site_name=${SITE_NAME}" >> $GITHUB_OUTPUT
          echo "site_env_name=${SITE_ENV_NAME}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: pnpm install --frozen-lock

      - name: Run site builds 🏗️
        run: pnpm build:apps

      - name: Generate .env file
        run: |
          cat <<EOF > ./apps/${{ steps.site_config.outputs.site_name }}/dist/.env
            ENVIRONMENT_NAME=${{ vars.ENVIRONMENT_NAME }}
          EOF
          cat ./apps/${{ steps.site_config.outputs.site_name }}/dist/.env

      - name: Create Project in Cloudflare Pages
        run: |
          echo "SITE NAME: ${{ steps.site_config.outputs.site_name }}"
          echo "SITE ENV NAME: ${{ steps.site_config.outputs.site_env_name }}"
          echo $(npx wrangler pages project create gha-env-poc-${{ steps.site_config.outputs.site_env_name }} --production-branch main) &> create-project-output.log
          echo $(cat create-project-output.log)
          [[ $(cat create-project-output.log | grep -c 'A project with this name already exists') != 0 ]] && echo "A project with this name already exists ✅" \
            || ([[ $(cat create-project-output.log | grep -c 'Successfully created') != 0  ]] && echo "Project successfully created ✅" || echo "ERROR ❌" )

      - name: Deploy
        run: |
          npx wrangler pages deploy apps/${{ steps.site_config.outputs.site_name }}/dist --project-name gha-env-poc-${{ steps.site_config.outputs.site_env_name }}
